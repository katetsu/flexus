// DO-NOT-REMOVE begin-copyright-block 
//
// Redistributions of any form whatsoever must retain and/or include the
// following acknowledgment, notices and disclaimer:
//
// This product includes software developed by Carnegie Mellon University.
//
// Copyright 2012 by Mohammad Alisafaee, Eric Chung, Michael Ferdman, Brian 
// Gold, Jangwoo Kim, Pejman Lotfi-Kamran, Onur Kocberber, Djordje Jevdjic, 
// Jared Smolens, Stephen Somogyi, Evangelos Vlachos, Stavros Volos, Jason 
// Zebchuk, Babak Falsafi, Nikos Hardavellas and Tom Wenisch for the SimFlex 
// Project, Computer Architecture Lab at Carnegie Mellon, Carnegie Mellon University.
//
// For more information, see the SimFlex project website at:
//   http://www.ece.cmu.edu/~simflex
//
// You may not use the name "Carnegie Mellon University" or derivations
// thereof to endorse or promote products derived from this software.
//
// If you modify the software you must place a notice on or within any
// modified version provided or made available to any third party stating
// that you have modified the software.  The notice shall include at least
// your name, address, phone number, email address and the date and purpose
// of the modification.
//
// THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
// EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
// THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
// TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
// BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
// SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
// ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
// CONTRACT, TORT OR OTHERWISE).
//
// DO-NOT-REMOVE end-copyright-block


# Regression trace for the network simulator
#
# format:
# sequence cpu op phys_addr value


# Initialize... ALLOCATE PAGES
0      0 LD 0x1000
1      0 LD 0x2000
2      0 LD 0x3000
3      0 LD 0x4000
4      0 LD 0x5000
5      0 LD 0x6000
6      0 LD 0x7000

# Basic connectivity to the node, check how long uncontended hops take

# 0 hop
1000   0 LD 0x1100

# 1 hop
2000   1 LD 0x1200

# 2 hops
3000   2 LD 0x1300

# 3 hops
4000   6 LD 0x1400

# 4 hops
5000   10 LD 0x1500

# Try to flood node 0, add more nodes each time....
10000  1 LD 0x2000
10001  2 LD 0x2000

# Four nodes
11000  1 LD 0x2040
11001  2 LD 0x2040
11003  3 LD 0x2040
11004  4 LD 0x2040

# Eight nodes
12000  1 LD 0x2040
12001  2 LD 0x2040
12002  3 LD 0x2040
12003  4 LD 0x2040
12004  5 LD 0x2040
12005  6 LD 0x2040
12006  7 LD 0x2040
12007  8 LD 0x2040

# 15 nodes
13000  1 LD 0x2080
13001  2 LD 0x2080
13002  3 LD 0x2080
13003  4 LD 0x2080
13004  5 LD 0x2080
13005  6 LD 0x2080
13006  7 LD 0x2080
13007  8 LD 0x2080
13008  9 LD 0x2080
13009 10 LD 0x2080
13010 11 LD 0x2080
13011 12 LD 0x2080
13012 13 LD 0x2080
13013 14 LD 0x2080
13014 15 LD 0x2080

# Now we can cause a flood of invalidations
14000 0 ST 0x2080

15000 0 ST 0x2081
20000 0 LD 0x0000
