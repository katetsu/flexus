# DO-NOT-REMOVE begin-copyright-block 
#
# Redistributions of any form whatsoever must retain and/or include the
# following acknowledgment, notices and disclaimer:
#
# This product includes software developed by Carnegie Mellon University.
#
# Copyright 2012 by Mohammad Alisafaee, Eric Chung, Michael Ferdman, Brian 
# Gold, Jangwoo Kim, Pejman Lotfi-Kamran, Onur Kocberber, Djordje Jevdjic, 
# Jared Smolens, Stephen Somogyi, Evangelos Vlachos, Stavros Volos, Jason 
# Zebchuk, Babak Falsafi, Nikos Hardavellas and Tom Wenisch for the SimFlex 
# Project, Computer Architecture Lab at Carnegie Mellon, Carnegie Mellon University.
#
# For more information, see the SimFlex project website at:
#   http://www.ece.cmu.edu/~simflex
#
# You may not use the name "Carnegie Mellon University" or derivations
# thereof to endorse or promote products derived from this software.
#
# If you modify the software you must place a notice on or within any
# modified version provided or made available to any third party stating
# that you have modified the software.  The notice shall include at least
# your name, address, phone number, email address and the date and purpose
# of the modification.
#
# THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
# EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
# THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
# IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
# TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
# BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
# SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
# ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
# CONTRACT, TORT OR OTHERWISE).
#
# DO-NOT-REMOVE end-copyright-block   
# Get variables from Makefile.defs
###############
include $(FLEXUS_ROOT)/makefile.defs

.PHONY: default core qemu depend

# Include simulator-specific variables
###############
include Makefile.$(SIMULATOR)

# Set the target to the default if none was passed in
###############
default: $(DEFAULT_TARGET)

# determine which platform we are building for
###############
ifeq ($(SELECTED_PLATFORM),default)
export TARGET_PLATFORM=$(DEFAULT_PLATFORM)
else
export TARGET_PLATFORM=$(SELECTED_PLATFORM)
endif

# Include variant-specific stuff
include $(FLEXUS_ROOT)/makefile.variant

# Ensure that we support the selected target and platform
###############

ifeq ($(SUPPORTS_QEMU),true)
qemu: qemu-$(TARGET_PLATFORM)
else
qemu:
	echo "Qemu target not supported for $(SIMULATOR)"
endif 

ifeq ($(SUPPORTS_X86),true)
qemu-x86: depend
	$(ECHO) "Building $(SIMULATOR) for x86 qemu"
	$(MAKE) $(SILENT_MAKE) -f $(FLEXUS_ROOT)/makefile.simulator_$(SELECTED_CC) libflexus_$(SIMULATOR)_$(VARIANT).so.deps $(BUILD_OPTIONS) SIMULATOR=$(SIMULATOR)
	$(MAKE) $(SILENT_MAKE) -f $(FLEXUS_ROOT)/makefile.simulator_$(SELECTED_CC) libflexus_$(SIMULATOR)_$(VARIANT).so libflexus_$(SIMULATOR)_$(VARIANT).so $(BUILD_OPTIONS) SIMULATOR=$(SIMULATOR)
else
qemu-x86:
	echo "x86 target platform not supported for $(SIMULATOR)"
endif

ifeq ($(SUPPORTS_V9),true)
qemu-v9: depend
	$(ECHO) "Building $(SIMULATOR) for $(VARIANT) QEMU"
	$(MAKE) $(SILENT_MAKE) -f $(FLEXUS_ROOT)/makefile.simulator_$(SELECTED_CC) libflexus_$(SIMULATOR)_$(VARIANT).so.deps $(BUILD_OPTIONS) SIMULATOR=$(SIMULATOR)
	$(MAKE) $(SILENT_MAKE) -f $(FLEXUS_ROOT)/makefile.simulator_$(SELECTED_CC) libflexus_$(SIMULATOR)_$(VARIANT).so $(BUILD_OPTIONS) SIMULATOR=$(SIMULATOR)
else
qemu-v9:
	echo "v9 target platform not supported for $(SIMULATOR)"
endif

ifeq ($(SUPPORTS_ARM),true)
qemu-arm: depend
	$(ECHO) "Building $(SIMULATOR) for $(VARIANT) QEMU"
	$(MAKE) $(SILENT_MAKE) -f $(FLEXUS_ROOT)/makefile.simulator_$(SELECTED_CC) libflexus_$(SIMULATOR)_$(VARIANT).so.deps $(BUILD_OPTIONS) SIMULATOR=$(SIMULATOR)
	$(MAKE) $(SILENT_MAKE) -f $(FLEXUS_ROOT)/makefile.simulator_$(SELECTED_CC) libflexus_$(SIMULATOR)_$(VARIANT).so $(BUILD_OPTIONS) SIMULATOR=$(SIMULATOR)
else
qemu-arm:
	echo "ARM target platform not supported for $(SIMULATOR)"
endif

# Set up a depend target
###############

depend: Makefile.depend.$(VARIANT)

.SUFFIXES:
.SUFFIXES: .cpp .$(GCC_DEP_EXT)
.SUFFIXES: .cpp .$(ICC_DEP_EXT)

.cpp.$(GCC_DEP_EXT):
	$(GCC) $(INCLUDES) $(VARIANT_DEFINES) $(GCC_DEPFLAGS) -MF $@ -MM -MT $*.$(GCC_OEXT) $<

Makefile.depend.$(GCC_VARIANT): $(patsubst %.cpp,%.$(GCC_DEP_EXT),$(wildcard *.cpp))
	cat $^ > Makefile.depend.$(GCC_VARIANT)

.cpp.$(ICC_DEP_EXT):
	$(GCC) $(INCLUDES) $(VARIANT_DEFINES) -MF $@ -MM -MT $(VARIANT_EXT).ipo_out.o $<

Makefile.depend.$(ICC_VARIANT): $(patsubst %.cpp,%.$(ICC_DEP_EXT),$(wildcard *.cpp))
	cat $^ > Makefile.depend.$(ICC_VARIANT)

# Clean the simulator
###############
clean:
	echo "Cleaning $(SIMULATOR)"
	rm -f *.*cc_o
	rm -f *.*_dep
	rm -f Makefile.depend.*
	rm -f *.ipo_out.o
	rm -f module_id.icc_o
	rm -f *.il
	rm -f *.so
	rm -f *.lst he.ps re.ps *.hex *.mcd_lnk

# Clobber the simulator
###############
clobber: clean
	echo "Clobbering $(SIMULATOR)"
	rm -f $(SIMULATOR).*.?cc
	rm -f *.rom *.cnt
